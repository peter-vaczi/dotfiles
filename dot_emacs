(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-faces-vector
   [default default default italic underline success warning error])
 '(ansi-color-names-vector
   ["#212526" "#ff4b4b" "#b4fa70" "#fce94f" "#729fcf" "#e090d7" "#8cc4ff" "#eeeeec"])
 '(case-fold-search t)
 '(column-number-mode t)
 '(comment-column 32)
 '(compilation-scroll-output 1)
 '(compilation-window-height 15)
 '(compile-command "make")
 '(completion-ignored-extensions
   '(".o" "~" ".bin" ".lbin" ".so" ".a" ".ln" ".blg" ".bbl" ".elc" ".lof" ".glo" ".idx" ".lot" ".svn/" ".hg/" ".git/" ".bzr/" "CVS/" "_darcs/" "_MTN/" ".fmt" ".tfm" ".class" ".fas" ".lib" ".mem" ".x86f" ".sparcf" ".fasl" ".ufsl" ".fsl" ".dxl" ".pfsl" ".dfsl" ".p64fsl" ".d64fsl" ".dx64fsl" ".lo" ".la" ".gmo" ".mo" ".toc" ".aux" ".cp" ".fn" ".ky" ".pg" ".tp" ".vr" ".cps" ".fns" ".kys" ".pgs" ".tps" ".vrs" ".pyc" ".pyo" ".gcda" ".gcno" ".d" ".COM" ".LNK" ".MP1" ".MP2" ".386" ".obj" ".os"))
 '(current-language-environment "English")
 '(custom-enabled-themes '(wheatgrass))
 '(erc-nick "ptr")
 '(erc-server "eslinuxp01.emea.nsn-net.net")
 '(erc-user-full-name "Peter Vaczi")
 '(flycheck-checker-error-threshold 4000)
 '(global-font-lock-mode t nil (font-lock))
 '(grep-command "grep -nH -e ")
 '(grep-find-command "find . -type f -print0 | xargs -0 -e grep -nH -e ")
 '(grep-find-ignored-directories '(".svn" ".git" ".hg" ".bzr" "coverage"))
 '(grep-find-template
   "find . <X> -type f <F> -print0 | xargs -0 -e grep <C> -nHI -e <R>")
 '(grep-highlight-matches t)
 '(grep-template "grep <C> -nH -e <R> <F>")
 '(grep-use-null-device nil)
 '(history-delete-duplicates t)
 '(indent-tabs-mode nil)
 '(inhibit-startup-screen t)
 '(make-backup-files nil)
 '(mouse-wheel-follow-mouse t)
 '(mouse-wheel-mode t)
 '(package-selected-packages
   '(go-autocomplete go-mode use-package magit flycheck cmake-mode))
 '(printer-name "bucit25b5.nsn-net.net")
 '(show-paren-mode t nil (paren))
 '(show-paren-style 'expression)
 '(tab-width 2)
 '(transient-mark-mode t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )


;;  '(c-echo-syntactic-information-p t)
;;  '(c-offsets-alist nil)

;; ---------------------------------------------------------------------
;; package manager (use list-packages)
(when (>= emacs-major-version 24)
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
  )

;; ---------------------------------------------------------------------
;; ido
(require 'ido)
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(setq ido-ignore-extensions t)
(setq ido-ignore-files (quote ("__lazy*")))
(ido-mode t)

;; ---------------------------------------------------------------------
;; ibuffer
(global-set-key (kbd "C-x C-b") 'ibuffer)
(autoload 'ibuffer "ibuffer" "List buffers." t)

;; ---------------------------------------------------------------------
;; remote files
(require 'tramp)
(setq tramp-default-method "ssh")

;; ---------------------------------------------------------------------
;; ediff settings
(setq ediff-split-window-function 'split-window-horizontally)

;; ---------------------------------------------------------------------
; revert buffer
(defun my-revert() (interactive) (revert-buffer nil t))

;; ---------------------------------------------------------------------
;; some convenience features
(fset 'yes-or-no-p 'y-or-n-p) ; stop forcing me to spell out "yes"
(setq visible-bell 0)
(setq ring-bell-function 'ignore)
(delete-selection-mode 1)

;; ---------------------------------------------------------------------
; paragraph filling
(setq-default fill-column 100)
; turn on auto-fill in some major modes
(add-hook 'message-mode-hook 'turn-on-auto-fill)
(add-hook 'text-mode-hook 'turn-on-auto-fill)

;; ---------------------------------------------------------------------
; recognize major mode for some extra files
(add-to-list 'auto-mode-alist '("/mutt" . message-mode)) ; message-mode for mail editing in mutt
(add-to-list 'auto-mode-alist '("sconstruct" . python-mode)) ;
(add-to-list 'auto-mode-alist '("sconscript" . python-mode)) ;
(add-to-list 'auto-mode-alist '("APKBUILD" .   shell-script-mode)) ;

;; ---------------------------------------------------------------------
;; home button behaviour
(defun dev-studio-beginning-of-line (ARG)
  "Move to 'beginning-of-line' ARG, or from there to the first non-whitespace character."
  (interactive "p")
  (if (and (looking-at "^") (= ARG 1)) (skip-chars-forward " \t") (move-beginning-of-line ARG)))

;; ---------------------------------------------------------------------
;; windmove key bindings (shift-arrow)
(when (fboundp 'windmove-default-keybindings)
  (windmove-default-keybindings))

;; ---------------------------------------------------------------------
;; shell-mode
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)

;; ---------------------------------------------------------------------
;; compilation-mode
(add-hook 'compilation-mode-hook 'ansi-color-for-comint-mode-on)

;; ---------------------------------------------------------------------
; antlr mode for .g4 files
(add-to-list 'auto-mode-alist '("\\.g4\\'" . antlr-mode))

;; ---------------------------------------------------------------------
;; c/c++ mode

; c++ mode for .h files
(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))

(c-add-style "my-style"
	     '("stroustrup"
	       (indent-tabs-mode . nil)                 ; use spaces rather than tabs
	       (c-basic-offset . 2)                     ; indent by two spaces
	       (c-offsets-alist . ((inline-open . 0)    ; custom indentation rules
				   (brace-list-open . 0)
                                   (case-label . +)
				   (statement-case-open . 0)))))

(defun my-c++-mode-hook ()
  (c-set-style "my-style")        ; use my-style defined above
  ;(auto-fill-mode)
  ;(c-toggle-auto-hungry-state 1)
  )

(add-hook 'c-mode-common-hook 'my-c++-mode-hook)

;; remove trailing whitespaces automatically
(add-hook 'c-mode-common-hook
          (lambda()
            (add-hook 'before-save-hook
                      'delete-trailing-whitespace nil t)))

;; show the current function's name
(add-hook 'c-mode-common-hook 
  (lambda ()
    (which-function-mode t)))

;; hide and show functions
(add-hook 'c-mode-common-hook
          (lambda()
            (local-set-key (kbd "C-c <right>") 'hs-show-block)
            (local-set-key (kbd "C-c <left>")  'hs-hide-block)
            (local-set-key (kbd "C-c <up>")    'hs-hide-all)
            (local-set-key (kbd "C-c <down>")  'hs-show-all)
            (hs-minor-mode t)))


;; ---------------------------------------------------------------------
;; golang
(with-eval-after-load 'go-mode (require 'go-autocomplete))

(defun my-go-mode-hook ()
  (setq gofmt-command "goimports")                 ; use goimports instead of gofmt
  (add-hook 'before-save-hook 'gofmt-before-save)  ; Call Gofmt before saving
  (local-set-key (kbd "M-.") 'godef-jump)          ; Godef jump key binding
  ;(auto-complete-mode 1)
  )
(add-hook 'go-mode-hook 'my-go-mode-hook)


;; ---------------------------------------------------------------------
;; git
(require 'magit)
(global-set-key "\M-s" 'magit-status)

;; ---------------------------------------------------------------------
;; cmake
(require 'cmake-mode)


;; ---------------------------------------------------------------------
;; flycheck
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))

;; ---------------------------------------------------------------------
; global key bindings
(global-set-key "\M-r" 'my-revert)
(global-set-key "\M-g" 'goto-line)
(global-set-key "\M-f" 'find-file-at-point)
; [f1] used by awesome/roxterm
(global-set-key [f2] 'next-error)
(global-set-key [M-f2] 'previous-error)
; [f3] kmacro-start-macro-or-insert-counter
; [f4] kmacro-end-or-call-macro
; [f5] undefined
; [f6] undefined
(global-set-key [f7] 'rgrep)
(global-set-key [f8] 'shell)
(global-set-key [f9] 'man)
; [f10] menu-bar-open
; [f11] used by awesome
(global-set-key [f12] 'recompile)
(global-set-key [(control a)]     'dev-studio-beginning-of-line)
(global-set-key [(home)]          'dev-studio-beginning-of-line)
(global-set-key [control end]   'end-of-buffer)
(global-set-key [control home]  'beginning-of-buffer)


(normal-erase-is-backspace-mode 1)

(provide 'emacs)
;;; emacs ends here
